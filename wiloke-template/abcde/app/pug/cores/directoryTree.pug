-
	var FS = require('fs');
	var PATH = require('path');
	var PUG = require('pug');
	
	function safeReadDirSync(path) {
		let dirData = {};
		try {
			dirData = FS.readdirSync(path);
		} catch(ex) {
			if (ex.code == "EACCES")
				return null;
			else throw ex;
		}
		return dirData;
	}

	function directoryTree(path, options, onEachFile) {
		const text = PATH.basename(path);
		const item = { path, text };
		let stats;

		try { stats = FS.statSync(path); }
		catch (e) { return null; }

		if (options && options.exclude && options.exclude.test(path))
			return null;  

		if (stats.isFile()) {
			
			const ext = PATH.extname(path).toLowerCase();
			
			if (options && options.extensions && !options.extensions.test(ext))
				return null;

			item.extension = ext;
			if (onEachFile) {
				onEachFile(item, PATH);
			}
		}
		else if (stats.isDirectory()) {
			let dirData = safeReadDirSync(path);
			if (dirData === null) return null;
			
			item.submenu = dirData
				.map(child => directoryTree(PATH.join(path, child), options, onEachFile))
				.filter(e => !!e);
		} else {
			return null; // Or set item.size = 0 for devices, FIFO and sockets ?
		}
		return item;
	}
